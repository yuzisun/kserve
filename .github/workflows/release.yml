on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
name: Build &amp; Release
jobs:
  version:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - id: get-version
      run: |
        export VERSION=$(cat VERSION.txt)
        echo "::set-output name=release_version::${VERSION}"
    outputs:
      release_version: ${{ steps.get-version.outputs.release_version }}
  build:
    runs-on: ubuntu-latest
    needs: [version]
    steps:
      - uses: actions/checkout@v2
      - name: build
        run: |
          ./hack/generate-install.sh ${{ needs.version.outputs.release_version }}
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./install/${{ needs.version.outputs.release_version }}/kserve.yaml
          asset_name: kserve.yaml 
